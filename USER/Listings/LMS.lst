C51 COMPILER V9.53.0.0   LMS                                                               04/25/2019 23:41:08 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE LMS
OBJECT MODULE PLACED IN ..\OBJ\LMS.obj
COMPILER INVOKED BY: D:\my software\worksoft\DXP&keil4&protues\MDK524\C51\BIN\C51.EXE ..\CORE\LMS.c OPTIMIZE(8,SPEED) BR
                    -OWSE INCDIR(..\CORE) DEBUG OBJECTEXTEND PRINT(.\Listings\LMS.lst) OBJECT(..\OBJ\LMS.obj)

line level    source

   1          //#include "LMS.h"
   2          
   3          ///* xn====实际输入信号
   4          // * itr===迭代次数,[M<itr<sizeof(xn)]
   5          // * en====误差序列(itr*1)
   6          // * dn====所期望的响应序列
   7          // * M=====滤波器阶数
   8          // * mu====步长(收敛因子)
   9          // * W=====滤波器权值矩阵，大小为M*itr
  10          // * yn====实际输出序列*/
  11          
  12          
  13          ///*LMS算法过程*/
  14          //float * LMS_Filter(int itr, const float *xn, const float *dn, double mu, int length)
  15          //{
  16          //    static int i = 0;
  17          //    static int k = 0;
  18          //    static float y = 0.0;
  19          //    static float en[F_COUNT];
  20          //    static float W[M][F_COUNT];
  21          //    static float x[M];
  22          //    static float yn[F_COUNT];
  23          
  24          //    /*创建一个en全零矩阵,en(k)表示第k次迭代时预期输出与实际输入的误差*/
  25          //    for (i=0; i<itr; i++)
  26          //    {
  27          //        en[i] = 0;
  28          //    }
  29          
  30          //    /*创建一个w全零矩阵，没每一行代表一个加权参量 ，每一列代表一次迭代*/
  31          //    for (i=0; i<M; i++)
  32          //        for (k=0; k<itr; k++)
  33          //            W[i][k] = 0;
  34          
  35          //    /*创建一个x全零矩阵*/
  36          //    for (i=0; i<M; i++)
  37          //        x[i] = 0;
  38          
  39          //    /*迭代计算*/
  40          //    for (k=M; k<=itr; k++)
  41          //    {
  42          //        /* 滤波器M个抽头的输入:从xn第k-1个值倒序取出M个样点的值放入x
  43          //         * y为滤波器输出:W的K-2列与x 的积的和*/
  44          //        for (i=0; i<M; i++)
  45          //        {
  46          //            x[i] = xn[k-i-1];
  47          //            y += W[i][k-2] * x[i];
  48          //        }        
  49          
  50          //        en[k-1] = dn[k-1] - y;  //第k次迭代误差
  51          
  52          //        /*滤波器权值计算的迭代式*/
  53          //        for (i=0; i<M; i++)
  54          //        {
C51 COMPILER V9.53.0.0   LMS                                                               04/25/2019 23:41:08 PAGE 2   

  55          //            W[i][k-1] = W[i][k-2] + 2*mu*en[k-1]*x[i];
  56          //        }
  57          
  58          //        y = 0.0;
  59          //    }
  60          
  61          //    /*创建一个yn全无穷大矩阵，位数与xn一样*/
  62          //    for (i=0; i<itr; i++)
  63          //    {
  64          //        yn[i] = 0.0;
  65          //    }
  66          
  67          //    /*求最优是滤波器的输出序列*/
  68          //    for (k=M; k<=length; k++)
  69          //    {
  70          //        for (i=0; i<M; i++)
  71          //        {
  72          //            x[i] = xn[k-i-1];
  73          //            y += W[i][itr-1]*x[i];
  74          //        }
  75          
  76          //        yn[k-1] = y;
  77          //        y = 0.0;
  78          
  79          //    }
  80          
  81          //    return yn;
  82          //}


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   ----    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
